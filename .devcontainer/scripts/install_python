#!/usr/bin/env bash
set -euo pipefail

if [ "$(id -u)" -eq 0 ]; then
    echo "[python] This script must be run as a non-root user."
    exit 1
fi

PYTHON_SERIES="${PYTHON_SERIES:-3.13}"
PYTHON_FALLBACK_VERSION="${PYTHON_FALLBACK_VERSION:-3.13.7}"

detect_latest_version() {
    local series="$1"
    local latest
    latest="$(curl -fsSL "https://www.python.org/ftp/python/" \
        | grep -Eo "${series//./\\.}\\.[0-9]+" \
        | sort -V \
        | tail -n1 \
        || true)"
    echo "${latest}"
}

if [ -z "${PYTHON_VERSION:-}" ]; then
    echo "[python] Discovering latest ${PYTHON_SERIES} release..."
    DETECTED_VERSION="$(detect_latest_version "${PYTHON_SERIES}")"
    if [ -n "${DETECTED_VERSION}" ]; then
        PYTHON_VERSION="${DETECTED_VERSION}"
        echo "[python] Using detected version ${PYTHON_VERSION}"
    else
        PYTHON_VERSION="${PYTHON_FALLBACK_VERSION}"
        echo "[python] Falling back to ${PYTHON_VERSION}"
    fi
fi

PYTHON_MAJOR_MINOR="${PYTHON_VERSION%.*}"
INSTALL_PREFIX="${PYTHON_PREFIX:-$HOME/.local/python-${PYTHON_VERSION}}"
PROFILE_FILE="${PROFILE_FILE:-$HOME/.bashrc}"
WORK_DIR="$(mktemp -d)"
ARCHIVE_NAME="Python-${PYTHON_VERSION}.tgz"
SOURCE_URL="https://www.python.org/ftp/python/${PYTHON_VERSION}/${ARCHIVE_NAME}"
DEPENDENCIES=(
    build-essential
    curl
    ca-certificates
    libssl-dev
    zlib1g-dev
    libncurses5-dev
    libncursesw5-dev
    libreadline-dev
    libsqlite3-dev
    libffi-dev
    libbz2-dev
    liblzma-dev
    libgdbm-dev
    libgdbm-compat-dev
    uuid-dev
    libexpat1-dev
    tk-dev
    libxml2-dev
    libxmlsec1-dev
)

cleanup() {
    rm -rf "${WORK_DIR}"
}
trap cleanup EXIT

echo "[python] Installing Python ${PYTHON_VERSION} into ${INSTALL_PREFIX}"

if command -v "${INSTALL_PREFIX}/bin/python3" >/dev/null 2>&1; then
    INSTALLED_VERSION="$("${INSTALL_PREFIX}/bin/python3" -V 2>/dev/null || true)"
    echo "[python] Python already installed: ${INSTALLED_VERSION}"
else
    missing_packages=()
    for pkg in "${DEPENDENCIES[@]}"; do
        if ! dpkg -s "${pkg}" >/dev/null 2>&1; then
            missing_packages+=("${pkg}")
        fi
    done

    if [ "${#missing_packages[@]}" -gt 0 ]; then
        if ! command -v sudo >/dev/null 2>&1; then
            echo "[python] Missing packages: ${missing_packages[*]}"
            echo "[python] sudo is required to install dependencies."
            exit 1
        fi
        echo "[python] Installing build dependencies: ${missing_packages[*]}"
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends "${missing_packages[@]}"
    fi

    echo "[python] Downloading source archive..."
    curl -fsSL "${SOURCE_URL}" -o "${WORK_DIR}/${ARCHIVE_NAME}"

    echo "[python] Extracting archive..."
    tar -xzf "${WORK_DIR}/${ARCHIVE_NAME}" -C "${WORK_DIR}"

    SRC_DIR="${WORK_DIR}/Python-${PYTHON_VERSION}"
    pushd "${SRC_DIR}" >/dev/null

    echo "[python] Configuring build..."
    ./configure \
        --prefix="${INSTALL_PREFIX}" \
        --enable-optimizations \
        --with-ensurepip=install \
        --enable-shared \
        LDFLAGS="-Wl,-rpath,${INSTALL_PREFIX}/lib"

    echo "[python] Building..."
    make -j"$(nproc)"

    echo "[python] Installing..."
    make install

    popd >/dev/null
fi

PYTHON_BIN="${INSTALL_PREFIX}/bin/python3"
if ! command -v "${PYTHON_BIN}" >/dev/null 2>&1; then
    echo "[python] Installation failed: ${PYTHON_BIN} not found."
    exit 1
fi

SHARED_LIB="$(find "${INSTALL_PREFIX}/lib" -maxdepth 1 -type f -name "libpython${PYTHON_MAJOR_MINOR}.so*" | head -n1 || true)"
if [ -z "${SHARED_LIB}" ]; then
    echo "[python] Could not locate libpython shared library under ${INSTALL_PREFIX}/lib"
    exit 1
fi

echo "[python] Python installed: $("${PYTHON_BIN}" -V)"
echo "[python] Located shared library: ${SHARED_LIB}"

ensure_line() {
    local line="$1"
    local file="$2"
    if [ ! -f "${file}" ]; then
        touch "${file}"
    fi
    if ! grep -Fxq "${line}" "${file}"; then
        echo "${line}" >> "${file}"
    fi
}

ensure_line "export PATH=\"${INSTALL_PREFIX}/bin:\$PATH\"" "${PROFILE_FILE}"
ensure_line "export CODON_PYTHON=\"${SHARED_LIB}\"" "${PROFILE_FILE}"

echo "[python] Added PATH and CODON_PYTHON to ${PROFILE_FILE}"
echo "[python] CODON_PYTHON=${SHARED_LIB}"
